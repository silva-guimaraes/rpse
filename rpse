#!/usr/bin/env python3
import sys
import os
import zipfile
import pysubs2
import argparse
from pathlib import Path
# RPSE RENAME AND PAIR SUBTITLES AND EPISODES
# todo:
# adicionar suporte para arquivos zip
# funcionalidade pra escolher a ordem dos arquivos no estilo\
#         concat protocol do ffmpeg

def fetch_remaining_files(input_file, excluded, sort=True):

    # um objeto path do arquivo em si
    first_target_file = Path(input_file)

    # um objeto path do diretorio onde o arquivo fica, que deve incluir todos os outros episodios/legendas
    file_dir = Path(os.path.dirname(first_target_file))

    file_buffer = []

    # iterar todos os outros arquivos no diretorio e juntar em uma lista os com a mesma extensão
    for i in file_dir.iterdir():
        if(i.suffix == first_target_file.suffix):
            file_buffer.append(Path(i))

    for i in excluded:
        file_buffer.remove(i)
    if(sort):
        file_buffer.sort()

    # excluir todos os arquivos que vierem antes do arquivo indicado, caso algum
    try:
        first_file_index = file_buffer.index(first_target_file)
    except ValueError:
        print('arquivo inexistente')
        exit(1)

    return file_buffer[first_file_index:]


def read_parse_file(file):
    ret = []
    with open(file) as file:
        for line in file:
            ret.append(line.rstrip())
    return ret


def fetch_zip(input_zip):
    input_zip = zipfile.ZipFile(input_zip)
    print(input_zip.infolist())


def handle_input_dir(input_dir):
    if (zipfile.is_zipfile(input_dir)):
        fetch_zip(input_dir)


def print_files(f):
    for i in f:
        print(i)


def main():
    parser = argparse.ArgumentParser(prog='rpse', description='renomear e parear arquivos de legendas com episódios')
    parser.add_argument('ep', metavar='ep', type=str, nargs=1)
    parser.add_argument('sub', metavar='sub', type=str, nargs=1)
    parser.add_argument('-p', '--preview', action='store_true')
    parser.add_argument('-d', '--delay', nargs=1, default=[0], type=int)
    parser.add_argument('-e', '--exclude', default=[], type=str, nargs='+')
    parser.add_argument('-txt', '--txtfile', action='store_true')

    namespace = parser.parse_args()

    delay = namespace.delay[0]
    excluded = namespace.exclude
    f_ep = namespace.ep[0]
    f_sub = namespace.sub[0]

    if (namespace.txtfile):
        eps = read_parse_file(f_ep)
        subs = read_parse_file(f_subs)
    else:
        eps = fetch_remaining_files(f_ep, excluded)
        subs = fetch_remaining_files(f_sub, excluded)

    if (namespace.preview):
        print_files(eps)
        print_files(subs)
        print(len(eps))
        print(len(subs))
        exit(0)

    for i in range(min(len(eps), len(subs))):
        # local (path) da legenda + nome do episodio + extensao da legenda
        new_name = subs[i].rename(subs[0].parent / Path(eps[i].name).with_suffix(subs[0].suffix))

        if (delay != 0):
            s = pysubs2.load(new_name)
            for line in s:
                line.start += delay
                line.end += delay

            s.save(new_name)


if __name__ == "__main__":
    main()
